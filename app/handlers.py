import os
from io import BytesIO

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from sqlalchemy import select

import app.database.requests as rq
import app.keyboards as kb
from app.database.models import async_session, UserInfo, RegistrationState, Unic_ID
from app.questions import questions,questions_wanted
router = Router()



# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    async with async_session() as session:
        if message.from_user.id == int(os.getenv('ADMIN_ID')):
            await message.answer("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω!", reply_markup=kb.admin_menu)
        else:
            user = await session.scalar(select(UserInfo).where(UserInfo.tg_id == message.from_user.id))

            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                await message.answer(
                    "–í—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑! –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
                    reply_markup=kb.reg_keyboard
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(F.contact)
async def handle_contact(message: Message):
    tg_id = message.from_user.id
    username = message.from_user.username or "None"
    first_name = message.from_user.first_name or "None"
    last_name = message.from_user.last_name or "None"
    number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await rq.set_user(
        tg_id=tg_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
        number=number,
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=None)
    await message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å! –ò—Å–ø—É–≥–∞–ª—Å—è? –ù–µ –±–æ–π—Å—è! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –µ–≥–æ. (–µ—Å–ª–∏ –≤—ã –Ω–µ —Å –§–ö–¢–ò)",
                         reply_markup=kb.opros_keyboard)

# @router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
# async def start_survey(message: Message, state: FSMContext):
#     await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None)
#     await state.set_state(RegistrationState.waiting_for_name)


# –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@router.message(F.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å ü§ô')
async def start_survey(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_age)


@router.message(RegistrationState.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        if 16 <= int(message.text) <= 40:
            age = int(message.text)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=None)
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.", reply_markup=None)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    name = user_data.get("name")

    await rq.unic_data_user(
        tg_id=message.from_user.id,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        in_bot_name=name,
        years=age,
        unic_your_id=0,
        unic_wanted_id=0
    )

    await message.answer("–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –ø–∞—Ä—Ç–Ω–µ—Ä–µ!", reply_markup=kb.start_opros)
    await state.clear()



@router.message(F.text == '–ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ü•µ')
async def start_survey(message: Message, state: FSMContext):
    await message.answer(f"–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", reply_markup=kb.back)



@router.message(F.text.in_(['–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–∏–∫))', '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É']))
async def start_survey(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å"""
    await state.update_data(your_answers=[])
    await state.update_data(wanted_answers=[])
    await ask_question(message, state, 1)


async def ask_question(message: Message, state: FSMContext, question_id: int):
    """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if question_id in questions:
        await message.answer(questions[question_id]["question"], reply_markup=kb.get_question_keyboard(question_id))
    else:
        await ask_wanted_question(message, state, 1, message.from_user.id)

async def ask_wanted_question(message: Message, state: FSMContext, question_id: int, user_id: int):
    if question_id in questions_wanted:
        await message.answer(questions_wanted[question_id]["question"], reply_markup=kb.get_wanted_question_keyboard(question_id))
    else:
        data = await state.get_data()
        unic_your_id = ";".join(data.get("your_answers", []))
        unic_wanted_id = ";".join(data.get("wanted_answers", []))

        await rq.unic_data_user(
            tg_id=user_id,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            in_bot_name=None,
            years=None,
            unic_your_id=unic_your_id,
            unic_wanted_id=unic_wanted_id
        )

        if user_id == int(os.getenv('ADMIN_ID')):
            await message.answer(f"–ì–æ—Ç–æ–≤–æ –∞–¥–º–∏–Ω", reply_markup=kb.admin_menu)
        elif F.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–∏–∫))':
            await message.answer(f"–í–∏–¥–∏—à—å, –Ω–µ —Å—Ç–æ–∏–ª–æ –±–æ—è—Ç—å—Å—è! –¢—ã –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=kb.menu)
        elif F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
            await message.answer(f"–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=kb.menu)
        await state.clear()




@router.callback_query(F.data.startswith("answer_you_"))
async def handle_you_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = callback.data.split("_")
    question_id, answer_index = int(data[2]), data[3]

    user_data = await state.get_data()
    your_answers = user_data.get("your_answers", [])
    your_answers.append(answer_index)
    await state.update_data(your_answers=your_answers)

    await callback.message.delete()
    await ask_question(callback.message, state, question_id + 1)
    await callback.answer()


@router.callback_query(F.data.startswith("answer_wanted_"))
async def handle_wanted_answer(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º callback.from_user.id
    data = callback.data.split("_")
    question_id, answer_index = int(data[2]), data[3]

    user_data = await state.get_data()
    wanted_answers = user_data.get("wanted_answers", [])
    wanted_answers.append(answer_index)
    await state.update_data(wanted_answers=wanted_answers)

    await callback.message.delete()
    await ask_wanted_question(callback.message, state, question_id + 1, callback.from_user.id)

    await callback.answer()





@router.message(F.text == '–ù–∞–∑–∞–¥ üëà')
async def menu(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ü–∞–Ω–µ–ª—å", reply_markup=kb.admin_menu)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.menu)


@router.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü§•')
async def find_partner(message: Message):
    async with async_session() as session:
        user = await session.scalar(select(Unic_ID).where(Unic_ID.tg_id == message.from_user.id))
        if (not user) and (message.from_user.id != int(os.getenv('ADMIN_ID'))):
            await message.answer(
                "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ'.",
                reply_markup=kb.reg_keyboard
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile_photo = await message.bot.get_user_profile_photos(message.from_user.id, limit=1)

        if user_profile_photo.total_count > 0:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            photo = user_profile_photo.photos[0][-1]  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await message.bot.download(photo.file_id)

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ BytesIO
            file_bytes = BytesIO(file.read())
            file_bytes.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=BufferedInputFile(file_bytes.read(), filename="avatar.jpg")
            )
        else:
            # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏! –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—ë –≤ Telegram, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –∑–¥–µ—Å—å.")

        # –ü—Ä–æ—Ñ–∏–ª—å

        profile_text = f"**–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:**\n\n" \
                       f"–ò–º—è: {user.in_bot_name if user and user.in_bot_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n" \
                       f"–í–æ–∑—Ä–∞—Å—Ç: {user.years if user and user.years else '–ù–µ —É–∫–∞–∑–∞–Ω'}"

        await message.answer(profile_text, reply_markup=kb.back)


@router.message(F.text == '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def admin(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–¢—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", reply_markup=kb.admin)
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è ", reply_markup=kb.menu)
