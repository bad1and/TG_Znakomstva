import os

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InputFile
from sqlalchemy import select
from aiogram.filters import Filter, CommandStart, Command
from app.database.models import async_session, UserInfo, RegistrationState, Unic_ID
import app.database.requests as rq
import app.keyboards as kb

router = Router()




# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    async with async_session() as session:
        if message.from_user.id == int(os.getenv('ADMIN_ID')):
            await message.answer("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω!", reply_markup=kb.admin_menu)
        else:
            user = await session.scalar(select(UserInfo).where(UserInfo.tg_id == message.from_user.id))

            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                await message.answer(
                    "–í—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑! –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
                    reply_markup=kb.reg_keyboard
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(F.contact)
async def handle_contact(message: Message):
    tg_id = message.from_user.id
    username = message.from_user.username or "None"
    first_name = message.from_user.first_name or "None"
    last_name = message.from_user.last_name or "None"
    number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await rq.set_user(
        tg_id=tg_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
        number=number,
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=None)
    await message.answer("–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å! –ò—Å–ø—É–≥–∞–ª—Å—è? –ù–µ –±–æ–π—Å—è! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –µ–≥–æ. (–µ—Å–ª–∏ –≤—ã –Ω–µ —Å –§–ö–¢–ò)", reply_markup=kb.opros_keyboard)


# –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@router.message(F.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å ü§ô')
async def start_survey(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_age)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(RegistrationState.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        if 16<=int(message.text)<=40:
            age = int(message.text)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=None)
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.", reply_markup=None)
        return

    user_name = await state.get_data()
    name = user_name.get("name")

    await rq.unic_data_user(
        tg_id=message.from_user.id,
        in_bot_name=name,
        years=age,
        voprosi='None',
        unic_your_id=0,
        unic_wanted_id=0
    )

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await message.answer(f"–í–∏–¥–∏—à—å –Ω–µ —Å—Ç–æ–∏–ª–æ –±–æ—è—Ç—å—Å—è! –¢—ã –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=None)
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f"P.S –ö–æ–≥–¥–∞ —Ç–æ —Ç—É—Ç –±—É–¥–µ—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫ –æ —Ç–µ–±–µ –∏ –∂–µ–ª–∞–µ–º–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–µ", reply_markup=kb.admin_menu)
    else:
        await message.answer(f"P.S –ö–æ–≥–¥–∞ —Ç–æ —Ç—É—Ç –±—É–¥–µ—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫ –æ —Ç–µ–±–µ –∏ –∂–µ–ª–∞–µ–º–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–µ", reply_markup=kb.menu)

    await state.clear()


@router.message(F.text == '–ù–∞–∑–∞–¥ üëà')
async def menu(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ü–∞–Ω–µ–ª—å", reply_markup=kb.admin_menu)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.menu)

@router.message(F.text == '–ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ü•µ')
async def find_partner(message: Message):
    await message.answer("–ö–æ–≥–¥–∞ —Ç–æ —Ç—É—Ç –±—É–¥–µ—Ç –ø–æ–∏—Å–∫...", reply_markup=kb.back)


@router.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü§•')
async def find_partner(message: Message):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user = await session.scalar(select(Unic_ID).where(Unic_ID.tg_id == message.from_user.id))
        if not user:
            await message.answer(
                "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ'.",
                reply_markup=kb.reg_keyboard
            )
            return

#TODO: –°–î–ï–õ–ê–ô –ê–í–´ –î–õ–Ø –ü–†–û–§–ò–õ–Ø
        profile_text = f"**–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:**\n\n" \
                       f"–ò–º—è: {user.in_bot_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n" \
                       f"–í–æ–∑—Ä–∞—Å—Ç: {user.years or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"\
                        "–ê–≤–∞—Ç–∞—Ä–∫–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤—ã(–ø–Ω–∏—Ç–µ –∞–¥–º–∏–Ω–∞)"

        await message.answer(profile_text,reply_markup=kb.back)


@router.message(F.text == '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def admin(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ü–∞–Ω–µ–ª—å", reply_markup=kb.admin)
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è ", reply_markup=kb.menu)


