import os
from io import BytesIO

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from sqlalchemy import select

import app.database.requests as rq
import app.keyboards as kb
from app.database.models import async_session, UserInfo, RegistrationState, Unic_ID
from app.questions import questions, questions_wanted

router = Router()


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    async with async_session() as session:
        user = await session.scalar(select(UserInfo).where(UserInfo.tg_id == message.from_user.id))

        if not user:
            await message.answer(
                "–í—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑! –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
                reply_markup=kb.reg_keyboard
            )
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.menu)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.contact)
async def handle_contact(message: Message):
    tg_id = message.from_user.id
    username = message.from_user.username or "None"
    first_name = message.from_user.first_name or "None"
    last_name = message.from_user.last_name or "None"
    number = message.contact.phone_number

    await rq.set_user(
        tg_id=tg_id, username=username, first_name=first_name,
        last_name=last_name, number=number
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å!", reply_markup=kb.opros_keyboard)


# –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
@router.message(F.text.in_({'–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å ü§ô', '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å'}))
async def start_survey(message: Message, state: FSMContext):
    await state.update_data(your_answers=[], wanted_answers=[])
    await ask_question(message, state, 1)


async def ask_question(message: Message, state: FSMContext, question_id: int):
    if question_id in questions:
        await message.answer(questions[question_id]["question"], reply_markup=kb.get_question_keyboard(question_id))
    else:
        await ask_wanted_question(message, state, 1, message.from_user.id)



async def ask_wanted_question(message: Message, state: FSMContext, question_id: int, user_id: int):
    if question_id in questions_wanted:
        await message.answer(questions_wanted[question_id]["question"], reply_markup=kb.get_wanted_question_keyboard(question_id))
    else:
        data = await state.get_data()
        unic_your_id = ";".join(data.get("your_answers", []))
        unic_wanted_id = ";".join(data.get("wanted_answers", []))

        await rq.unic_data_user(
            tg_id=user_id,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            in_bot_name=None,
            years=None,
            unic_your_id=unic_your_id,
            unic_wanted_id=unic_wanted_id
        )

        await message.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!", reply_markup=kb.back)
        await state.clear()



@router.callback_query(F.data.startswith("answer_you_"))
async def handle_you_answer(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º callback.from_user.id
    data = callback.data.split("_")
    question_id, answer_index = int(data[2]), data[3]

    user_data = await state.get_data()
    your_answers = user_data.get("your_answers", [])
    your_answers.append(answer_index)
    await state.update_data(your_answers=your_answers)

    await callback.message.delete()
    await ask_question(callback.message, state, question_id + 1)
    await callback.answer()


@router.callback_query(F.data.startswith("answer_wanted_"))
async def handle_wanted_answer(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º callback.from_user.id
    data = callback.data.split("_")
    question_id, answer_index = int(data[2]), data[3]

    user_data = await state.get_data()
    wanted_answers = user_data.get("wanted_answers", [])
    wanted_answers.append(answer_index)
    await state.update_data(wanted_answers=wanted_answers)

    await callback.message.delete()
    await ask_wanted_question(callback.message, state, question_id + 1, callback.from_user.id)

    await callback.answer()


@router.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü§•')
async def show_profile(message: Message):
    async with async_session() as session:
        user = await session.scalar(select(Unic_ID).where(Unic_ID.tg_id == message.from_user.id))
        if not user:
            await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ'.", reply_markup=kb.reg_keyboard)
            return

        profile_text = f"**–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:**\n\n" \
                       f"–ò–º—è: {user.in_bot_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n" \
                       f"–í–æ–∑—Ä–∞—Å—Ç: {user.years or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        await message.answer(profile_text, reply_markup=kb.back)
